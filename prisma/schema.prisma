// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL_MONGO")
}

model Question {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  topic     Topic
  yearLevel Int
  tags      Tag[]    @relation(fields: [tagIds], references: [id])
  tagIds    String[] @db.ObjectId
  content   String
  solution  String
  isDraft   Boolean  @default(false)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([topic, yearLevel, updatedAt])
}

model Tag {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String     @unique
  questions   Question[] @relation(fields: [questionIds], references: [id])
  questionIds String[]   @db.ObjectId
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          UserRole   @default(USER)
  questions     Question[]
}

// NEXT-AUTH 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  ext_expires_in    Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Topic {
  NUM
  ALG
  MEAS
  GEO
  STAT
  PROB
  CALC
}

enum UserRole {
  ADMIN
  EDITOR
  USER
}
